<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	    http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       	http://www.springframework.org/schema/context
       	http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/batch
       http://www.springframework.org/schema/batch/spring-batch-3.0.xsd"
	default-lazy-init="true">

	<batch:job id="testJob">
		<batch:step id="first-step" next="secend-step">
			<batch:tasklet ref="firstTasklet"></batch:tasklet>
		</batch:step>
		<batch:step id="secend-step" next="three-step">
			<batch:tasklet throttle-limit="5">
				<batch:chunk reader="outerReconReader" processor="myProcessor" writer="myWriter"
					commit-interval="1000" ></batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="three-step">
			<batch:tasklet ref="threeTasklet"></batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- 以游标形式从DB读取数据 -->
	<bean id="abstractCursorReader" abstract="true"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="outerReconReader" parent="abstractCursorReader" scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
				<![CDATA[
					SELECT 
						t.order_no AS thirdOrderNo, t.order_amt AS thirdOrderAmount, t.status AS thirdStatus, t.id AS thirdId, t.request_time AS thirdRequestTime, 
						p.order_no AS platOrderNo, p.order_amt AS platOrderAmount, p.status AS platStatus, p.id AS platId, p.request_time as platRequestTime, 
						IFNULL(t.channel_code, p.channel_code) AS channelCode, IFNULL(t.trantype, p.trantype) AS thirdTransType, 
						'#{jobParameters['batchNo']}' AS thirdBatchNo, p.pay_order_no as payOrderNo, p.remark as bankAbbr
						FROM recon_outer_third_order t 
						LEFT JOIN recon_outer_plat_order p 
						ON t.order_no = p.order_no 
						WHERE t.trantype = '#{jobParameters['transType']}' and 
						t.channel_code = '#{jobParameters['channelCode']}' and  
						p.status = 2
				]]>
			</value>
		</property>
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass"
					value="com.tandong.iknowbox.admin.job.vo.ReconOuterMessage" />
			</bean>
		</property>
	</bean>
	
	<batch:job-repository id="jobRepository"
		data-source="dataSource" transaction-manager="transactionManager"
		isolation-level-for-create="REPEATABLE_READ" table-prefix="batch_"
		max-varchar-length="1000" />

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="taskExecutor" ref="asyncTaskExecutor" />
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	<bean id="asyncTaskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

	<bean id="jobLauncherTestUtils" class="org.springframework.batch.test.JobLauncherTestUtils">
		<property name="job" ref="testJob"></property>
	</bean>
</beans>